// main.js
import { createApp } from "vue";
import { createPinia } from "pinia";

import App from "./App.vue";
import router from "./router";

import piniaPluginPersistedstate from "pinia-plugin-persistedstate";

const app = createApp(App);

const pinia = createPinia();
pinia.use(piniaPluginPersistedstate);

app.use(router);
app.use(pinia);
app.mount("#app");

// App.vue
<template>
  <div class="app-container">
    <header class="app">
      <Header />
    </header>

    <main class="mainapp">
      <router-link :to="{ name: 'video-detail', params: { videoId: 1 } }">
        상세 페이지 예시
      </router-link>
      <router-view></router-view>
    </main>

    <Footer />
  </div>
</template>

<script setup>
import { RouterView } from "vue-router";
import Header from "./components/layout/Header.vue";
import Footer from "./components/layout/Footer.vue";
import { useUserStore } from "@/stores/userStore";

const userStore = useUserStore();
</script>

<style scoped>
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.app {
  padding-top: 20px;
  width: 60%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.page-title {
  text-align: center;
  margin-bottom: 40px;
}

.user-form {
  max-width: 500px;
  width: 90%;
  margin: 40px auto;
  padding: 40px 30px 20px;
  background-color: #fdfdfd;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

main.mainapp {
  width: 60%;
  padding-top: 20px;
  flex: 1;
}

body {
  font-family: Arial, sans-serif;
}

footer {
  padding: 20px;
  height: 50px;
  background-color: black;
  color: white;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
</style>

// router/index.js
import { createRouter, createWebHistory } from "vue-router";

import MainView from "@/views/MainView.vue";
import SignupView from "@/views/SignupView.vue";
import LoginView from "@/views/LoginView.vue";
import FindIdView from "@/views/FindIdView.vue";
import FindPwView from "@/views/FindPwView.vue";
import ResetPwView from "@/views/ResetPwView.vue";
import FollowListView from "@/views/FollowListView.vue";
import MyPageView from "@/views/MyPageView.vue";
import VideoDetailView from "@/views/VideoDetailView.vue";

const routes = [
  {
    path: "/",
    name: "main",
    component: MainView,
  },
  {
    path: "/signUp",
    name: "signUp",
    component: SignupView,
  },
  {
    path: "/logIn",
    name: "logIn",
    component: LoginView,
  },
  {
    path: "/findId",
    name: "findId",
    component: FindIdView,
  },
  {
    path: "/findPw",
    name: "findPw",
    component: FindPwView,
  },
  {
    path: "/resetPw",
    name: "resetPw",
    component: ResetPwView,
  },
  {
    path: "/:userId/myPage",
    name: "myPage",
    component: MyPageView,
    children: [
      {
        path: "follow-list/:relation",
        name: "followList",
        component: FollowListView,
      },
    ],
  },
  {
    path: "/:videoId/detail",
    name: "video-detail",
    component: VideoDetailView,
  },
  { path: "/video/:id", component: VideoDetailView },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;

// components/common/VideoList.vue
<template>
  <div class="videos">
    <VideoCard v-for="video in videos" :key="video.id" :video="video" />
  </div>
</template>

<script setup>
import VideoCard from './VideoCard.vue'
const props = defineProps({ videos: Array })
</script>

<style scoped>
.videos {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: center;
  width: 100%;
  max-width: 900px;
  box-sizing: border-box;
}
@media (max-width: 700px) {
  .videos { gap: 16px; }
}
</style>

// components/common/BaseButton.vue
<template>
  <div class="base-button">
    <button :type="type" @click="action">{{ text }}</button>
  </div>
</template>

<script setup>
defineProps({
  type: String,
  text: String,
  action: Function,
});
</script>

<style scoped>
button {
  width: 100%;
  height: 45px;
  margin-top: 30px;
  padding: 12px;
  font-size: 16px;
  font-weight: bold;
  background-color: #ccc;
  border: 1px solid black;
  border-radius: 5px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}

button:hover {
  background-color: #808080;
}
</style>

// components/common/SortBar.vue
<template>
  <div class="sort-bar">
    <div class="dropdown" @click="toggleDropdown">
      <button class="sort-btn">
        <img :src="tuneImg" alt="정렬" class="sort-icon" />
        {{ sortLabelMap[sortType] }}
      </button>
      <ul v-if="dropdownOpen" class="dropdown-list">
        <li
          v-for="type in sortTypes"
          :key="type"
          :class="{ active: sortType === type }"
          @click.stop="selectSort(type)"
        >
          {{ sortLabelMap[type] }}
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import tuneImg from '@/assets/img/Tune.png'

import { ref } from 'vue'

const props = defineProps({ sortType: String })
const emit = defineEmits(['sort'])

const sortTypes = ['views', 'likes']
const sortLabelMap = {
  views: '조회순',
  likes: '좋아요순'
}

const dropdownOpen = ref(false)

function toggleDropdown() {
  dropdownOpen.value = !dropdownOpen.value
}

function selectSort(type) {
  if (type !== props.sortType) {
    emit('sort', type)
  }
  dropdownOpen.value = false
}

// 바깥 클릭 시 드롭다운 닫기
function onClickOutside(event) {
  if (!event.target.closest('.dropdown')) {
    dropdownOpen.value = false
  }
}
window.addEventListener('click', onClickOutside)
</script>

<style scoped>
.sort-bar {
  margin: 10px 0 20px 0;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  width: 100%;
  max-width: 900px;
  box-sizing: border-box;
  padding-right: 10px;
}
.dropdown {
  position: relative;
}
.sort-btn {
  background: none;
  border: none;
  color: #000;
  font-size: 18px;
  padding: 4px 10px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
}
.sort-icon {
  width: 24px;
  height: 24px;
  margin-right: 4px;
  vertical-align: middle;
}
</style>

// views/MainView.vue
<template>
  <div class="container">
    <SearchBar @search="onSearch" />
    <CategoryButtons
      :categories="categories"
      :selected="selectedCategory"
      @select="onCategorySelect"
    />
    <SortBar :sortType="sortType" @sort="onSort" />
    <VideoList :videos="filteredVideos" />
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from "vue"
import axios from "axios";
import SearchBar from "@/components/common/SearchBar.vue";
import CategoryButtons from "@/components/common/CategoryButtons.vue";
import SortBar from "@/components/common/SortBar.vue";
import VideoList from "@/components/common/VideoList.vue";

const categories = ["등", "가슴", "하체", "팔", "코어", "전신"];

const videos = ref([]);

onMounted(() => {
  axios.get('/api/video')
    .then((res) => {
      videos.value = res.data.map(v => ({
        id: v.videoId,
        title: v.videoTitle,
        category: v.videoPart,
        thumb: v.unqImgName,  // 썸네일 이미지 경로
        views: v.videoViewCnt,
        likes: v.videoLikeCnt ?? 0, // 좋아요 수 없으면 0
        url: v.videoUrl,
      }));
    })
    .catch((error) => {
      console.error("비디오 데이터 불러오기 실패:", error);
    })
})

const searchKeyword = ref("");
const selectedCategory = ref("");
const sortType = ref("views"); // 조회순

const onSearch = (keyword) => {
  searchKeyword.value = keyword;
};
const onCategorySelect = (cat) => {
  selectedCategory.value = cat;
};
const onSort = (type) => {
  sortType.value = type;
};

const filteredVideos = computed(() => {
  let result = videos.value;
  if (searchKeyword.value) {
    result = result.filter((v) => v.title.includes(searchKeyword.value));
  }
  if (selectedCategory.value) {
    result = result.filter((v) => v.category === selectedCategory.value);
  }
  result = [...result].sort((a, b) => b[sortType.value] - a[sortType.value]);
  return result;
});
</script>

<style scoped>
.container {
  width: 100%;
  max-width: 900px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  align-items: center;
}
@media (max-width: 700px) {
  .container {
    max-width: 100%;
    padding: 0 10px;
  }
}
</style>

// views/LikeVideoView.vue
<template>
  <div class="container">
    <div class="video-viewer">
      <button
        class="arrow left"
        @click="prevVideo"
        :disabled="currentIndex === 0"
        :class="{ invisible: currentIndex === 0 }"
      >◀</button>
      <VideoList :videos="[filteredVideos[currentIndex]]" />
      <button
        class="arrow right"
        @click="nextVideo"
        :disabled="currentIndex === filteredVideos.length - 1"
        :class="{ invisible: currentIndex === filteredVideos.length - 1 }"
      >▶</button>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch } from "vue";
import VideoList from "@/components/common/VideoList.vue";

const categories = ["등", "가슴", "하체", "팔", "코어", "전신"];
const videos = ref([
  {
    id: 1,
    title: "푸쉬업 완벽 가이드",
    category: "가슴",
    thumb: "../img/Video%20Call.png",
    views: 150,
    likes: 35,
  },
  {
    id: 2,
    title: "스쿼트 제대로 하는 법",
    category: "하체",
    thumb: "../img/Video%20Call.png",
    views: 200,
    likes: 52,
  },
  {
    id: 3,
    title: "플랭크 5분 챌린지",
    category: "코어",
    thumb: "../img/Video%20Call.png",
    views: 180,
    likes: 40,
  },
  {
    id: 4,
    title: "풀업 입문자 강좌",
    category: "등",
    thumb: "../img/Video%20Call.png",
    views: 120,
    likes: 25,
  },
]);

const searchKeyword = ref("");
const selectedCategory = ref("");
const sortType = ref("views"); // 조회순

const onSearch = (keyword) => {
  searchKeyword.value = keyword;
};
const onCategorySelect = (cat) => {
  selectedCategory.value = cat;
};
const onSort = () => {
  sortType.value = sortType.value === "views" ? "likes" : "views";
};
</script> 